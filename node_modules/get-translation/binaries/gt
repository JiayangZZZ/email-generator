#!/usr/bin/env node

/**
 * Module dependencies
 */

var program = require('commander')
  , findup = require('findup-sync')
  , path = require('path')
  , open = require('open')
  , pjson = require('../package.json')
  , _ = require('underscore')
  , glob = require('glob')
  , pcf = require('../configurations/program')
  , log = require('../libraries/_log')
  , utilities = require('../libraries/utilities');

/**
 * Project paths
 */

var gtPath = findup('gt.json')
  , projectConfigurations
  , _projectConfigurations
  , root
  , cf;

if((process.argv.length > 2 && process.argv[2] !== 'init') && !gtPath) {
  console.log('Not in a gt project (or any of the parent directories):');
  return;
}

if(gtPath) {
  root = path.dirname(gtPath);
  projectConfigurations = require(gtPath);
}
else {
  root = process.cwd();
  projectConfigurations = {};
}


/**
 * Copy for use in showing configs
 */

_projectConfigurations = _.clone(projectConfigurations);

/**
 * Add terminal colors
 */

require('terminal-colors');

/**
 * Set default configs
 */

var defaultConfigurations = {
  folder : pcf.DEFAULT_FOLDER,
  requirejs : pcf.DEFAULT_REQUIREJS,
  translationFunction : pcf.DEFAULT_TRANSLATION_FUNCTION,
  port : pcf.DEFAULT_PORT,
  autoOpen : pcf.DEFAULT_AUTO_OPEN,
  root : root
};
// Merge with programm configs
defaultConfigurations = _.extend(defaultConfigurations, pcf);
pcf = _.defaults(projectConfigurations, defaultConfigurations);

/**
 * Set short-cuts configs
 */

pcf.localesFolder = path.join(pcf.root, pcf.folder, pcf.LOCALES_FOLDER);
pcf.deleteLog = pcf.folder + pcf.DELETE_LOG_FILE;
pcf.latestSearchFile = pcf.folder + pcf.LATEST_SEARCH_CACHE_FILE;
pcf.programmingLanguage = pcf.programmingLanguage || pcf.DEFAULT_PROGAMMING_LANGUAGE;
if(typeof pcf.output === 'undefined') {
  pcf.output = path.join(pcf.folder, pcf.DEFAULT_OUTPUT);
}
else {
  pcf.output = path.join(pcf.root, pcf.output);
}

lcf = require('../plugins/' + pcf.programmingLanguage + '/parseConfigs');
if(typeof lcf.quiet === 'undefined') {
  lcf.quiet = pcf.DEFAULT_QUIET;
}


/**
 * Get all source files.
 */

var src = [], _files, adds, removes;

/**
 * Check if source is defined
 */
if(process.argv.length > 2 && process.argv[2] !== 'init') {
  if(!pcf.src) {
    console.log('You must define your source files on a glob pattern your gt.json file.')
    return;
  }

  for(var i = 0; i < pcf.src.length; i++) {
    if(pcf.src[i].substr(0, 1) !== '!') {
      adds = glob.sync(pcf.src[i], { cwd: root });
      src = src.concat(adds);
    } else {
      removes = glob.sync(pcf.src[i], { cwd: root });
      src = src.filter(function(file) {
        return removes.indexOf(file) === -1;
      });
    }
  }
  if(!src.length) {
    console.log('Please update your gt.json to include your source files');
    return;
  }
  pcf.src = src;
}


/**
 * Global configurations
 */

global.pcf = pcf;

/**
 * Languague configurations
 */

global.lcf = lcf;

/**
 * Set from binary to true. To indicate that the binary have been run
 */

global.fromBinary = true;



var gt = require('../libraries');

program
  .version(pjson.version)
  .option('-l, --locale <locale>', 'specify locale', String, pcf.defaultLocale)
  .option('-ls, --locales <locales>', 'specify locales', String, pcf.defaultLocales)
  .option('-p, --port <port>', 'specify the port [\'' + pcf.port + '\']', Number, pcf.port)
  .option('-f, --folder <folder>', 'specify folder', String, pcf.folder)
  .option('-o, --output <output>', 'specify output', String, pcf.output)
  .option('-s, --source <source>', 'specify source', String, pcf.src)
  .option('-dl, --default-locale <default-locale>', 'specify default locale', String, pcf.defaultLocale)
  .option('-pl, --programming-languague <programming-languague>', 'specify programming languague', String, pcf.programmingLanguague)

program
  .command('init')
  .description('Initialize a new GetTranslation project')
  .action(function() {
    gt.init();
  });

program
  .command('interface')
  .description('Starts the translation interface')
  .action(function() {
    if(!utilities.initiatedProject()) {
      return console.log('You haven\'t initialized a project yet');
    }
    require('../interface/start');
  });

program
  .command('search [q]')
  .description('Search translation keys and values')
  .action(function(q) {
    if(!utilities.initiatedProject()) {
      return console.log('You haven\'t initialized a project yet');
    }
    if(typeof q === 'undefined') {
      log.error('You need to provide a query in your search. E.g. gt search "some query"');
      return false;
    }
    gt.search(q);
  });

program
  .command('log')
  .description('Get the latest translations')
  .action(function() {
    if(!utilities.initiatedProject()) {
      return console.log('You haven\'t initialized a project yet');
    }
    gt.log(this.locale);
  });

program
  .command('update')
  .description('Update translation keys from source')
  .action(function() {
    if(!utilities.initiatedProject()) {
      return console.log('You haven\'t initialized a project yet');
    }
    gt.update();
  });

program
  .command('compile')
  .description('Compile transations')
  .action(function() {
    if(!utilities.initiatedProject()) {
      return console.log('You haven\'t initialized a project yet');
    }
    gt.compile();
  });

program
  .command('set [reference] [value]')
  .description('Edit a translation')
  .action(function(reference, value) {
    if(!utilities.initiatedProject()) {
      return console.log('You haven\'t initialized a project yet');
    }
    gt.edit(reference, value, this.locale);
  });

program
  .command('configs')
  .description('Show configurations')
  .action(function() {
    if(!utilities.initiatedProject()) {
      return console.log('You haven\'t initialized a project yet');
    }
    console.log(_projectConfigurations);
  });

program.parse(process.argv);
