;(function() {var t = {'efwedwefdefddqwdedwwedwecdsdewefdwfew' : function anonymous(it) {
return 'bajsd';
},
'It can have an if and else statement' : function anonymous(it) {
if(it.test > 1) {return 'it works';} else {return 'else works';}
},
'wef' : function anonymous(it) {
return 'bajs';
},
'It can have %%' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have %%' + ';';
},
'It can have double and single quote in translation' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have double and single quote in translation' + ';';
},
'It can have \\' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have \\' + ';';
},
'Translation function can be inside function calls' : function anonymous(it) {
return 'yes it can';
},
'Translation vars can have multi-line object literal' : function anonymous(it) {
return 'yes it can';
},
'Translation vars can have multiple function call with a multiple object literal as a parameter' : function anonymous(it) {
return 'yes it can';
},
'Translation vars can have single function call with a multiple object literal as a parameter' : function anonymous(it) {
return 'yes it can';
},
'Translation vars can have single function call' : function anonymous(it) {
return 'yes it can';
},
'Translation vars can have multiple function call with a single object literal as a parameter' : function anonymous(it) {
return 'yes it can';
},
'Translation vars can have single method call' : function anonymous(it) {
return 'yes it can';
},
'Translation vars can have single function call with a single object literal as a parameter' : function anonymous(it) {
return 'yes it can';
},
'Translation vars can have multiple method calls' : function anonymous(it) {
return 'yes it can';
},
'Translation vars can have multiple function calls' : function anonymous(it) {
return 'yes it can';
},
'Edit me' : function anonymous(it) {
return 'Helloworld';
},
'Grunt-translate can have tailing comments' : function anonymous(it) {
return 'yes it can';
},
'Grunt-translate can have tailing comments with translation vars' : function anonymous(it) {
return 'yes it can';
},
'Grunt-translate can have tailing comments with multi-line translation vars' : function anonymous(it) {
return 'yes it can';
},
'Translation vars can be in one object literal' : function anonymous(it) {
return 'yes it can';
},
'Translation vars have dot notation' : function anonymous(it) {
return 'yes it can';
},
'Translation vars can have one line object literal' : function anonymous(it) {
return 'yes it can';
},
'It can have an if and else if and else statements' : function anonymous(it) {
if('test' < 2) {return 'Number is ' + it.test + '';}else if('test' < 1) {return 'Number is ' + it.test + '';} else {return 'yes it can';}
},
'It can have only one string' : function anonymous(it) {
return 'yes it can';
},
'It can have ..' : function anonymous(it) {
return 'yes it can';
},
'It can have ::' : function anonymous(it) {
return 'yes it can';
},
'It can have ;;' : function anonymous(it) {
return 'yes it can';
},
'It can have @@' : function anonymous(it) {
return 'yes it can';
},
'It can have ()' : function anonymous(it) {
return 'yes it can';
},
'It can have "' : function anonymous(it) {
return 'yes it can "';
},
'It can have ##' : function anonymous(it) {
return 'yes it can';
},
'It can have ??' : function anonymous(it) {
return 'yes it can';
},
'It can have !!' : function anonymous(it) {
return 'yes it can';
},
'It can have ’’' : function anonymous(it) {
return 'yes it can';
},
'It can have __' : function anonymous(it) {
return 'yes it can';
},
'It can have ^^' : function anonymous(it) {
return 'yes it can';
},
'It can have ´´' : function anonymous(it) {
return 'yes it can';
},
'It can have ``' : function anonymous(it) {
return 'yes it can';
},
'It can have ==' : function anonymous(it) {
return 'yes it can';
},
'It can have ++' : function anonymous(it) {
return 'yes it can';
},
'It can have --' : function anonymous(it) {
return 'yes it can';
},
'It can have **' : function anonymous(it) {
return 'yes it can';
},
'It can have //' : function anonymous(it) {
return 'yes it can';
},
'It can have &&' : function anonymous(it) {
return 'yes it can';
},
'It can have ,,' : function anonymous(it) {
return 'yes it can';
},
'It can have $$' : function anonymous(it) {
return 'yes it can';
},
'It can have €€' : function anonymous(it) {
return 'yes it can';
},
'It can have <>' : function anonymous(it) {
return 'yes it can';
},
'It can take || in if statement' : function anonymous(it) {
if('test1' === 'test1' || 'test2' === 'test2') {return 'yes it can';} else {return 'no it can not';}
},
'It can take several || in if statement' : function anonymous(it) {
if('test1' === 'test1' || 'test2' === 'test2' || 'test3' === 'test3') {return 'yes it can';} else {return 'no it can not';}
},
'It can take several && in if statement' : function anonymous(it) {
if('test1' === 'test1' && 'test2' === 'test2' && 'test3' === 'test3') {return 'yes it can';} else {return 'no it can not';}
},
'It can take && in if statement' : function anonymous(it) {
if('test1' === 'test1' && 'test2' === 'test2') {return 'yes it can';} else {return 'no it can not';}
}};function gt(key) { if(!(key in t)) { return 'KEY_NOT_IN_SOURCE: ' + key; } return t[key].apply(undefined, arguments);};if(typeof require === "function" && typeof exports === 'object' && typeof module === 'object') {module.exports = gt;}else if (typeof define === "function" && define.amd) {define(function () {return gt;});}else {window.gt = gt;}})();