;(function() {var t = {'It can have __' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have __' + ';';
},
'It can have an if and else statement' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have an if and else statement' + ';';
},
'It can have only one string' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have only one string' + ';';
},
'It can take && in if statement' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can take && in if statement' + ';';
},
'It can take || in if statement' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can take || in if statement' + ';';
},
'It can take several && in if statement' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can take several && in if statement' + ';';
},
'It can take several || in if statement' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can take several || in if statement' + ';';
},
'Translation vars can be in one object literal' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'Translation vars can be in one object literal' + ';';
},
'Translation vars can have one line object literal' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'Translation vars can have one line object literal' + ';';
},
'Translation vars can have multi-line object literal' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'Translation vars can have multi-line object literal' + ';';
},
'Translation vars have dot notation' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'Translation vars have dot notation' + ';';
},
'Translation vars can have single function call' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'Translation vars can have single function call' + ';';
},
'Translation vars can have multiple function calls' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'Translation vars can have multiple function calls' + ';';
},
'Translation vars can have single method call' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'Translation vars can have single method call' + ';';
},
'Translation vars can have multiple method calls' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'Translation vars can have multiple method calls' + ';';
},
'Translation vars can have single function call with a single object literal as a parameter' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'Translation vars can have single function call with a single object literal as a parameter' + ';';
},
'Translation vars can have multiple function call with a single object literal as a parameter' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'Translation vars can have multiple function call with a single object literal as a parameter' + ';';
},
'Translation vars can have single function call with a multiple object literal as a parameter' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'Translation vars can have single function call with a multiple object literal as a parameter' + ';';
},
'Translation vars can have multiple function call with a multiple object literal as a parameter' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'Translation vars can have multiple function call with a multiple object literal as a parameter' + ';';
},
'Translation function can be inside function calls' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'Translation function can be inside function calls' + ';';
},
'It can have <>' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have <>' + ';';
},
'It can have ..' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have ..' + ';';
},
'It can have ,,' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have ,,' + ';';
},
'It can have ::' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have ::' + ';';
},
'It can have ;;' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have ;;' + ';';
},
'It can have ’’' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have ’’' + ';';
},
'It can have an if and else if and else statements' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have an if and else if and else statements' + ';';
},
'It can have &&' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have &&' + ';';
},
'It can have %%' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have %%' + ';';
},
'It can have $$' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have $$' + ';';
},
'It can have €€' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have €€' + ';';
},
'It can have ##' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have ##' + ';';
},
'It can have ??' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have ??' + ';';
},
'It can have !!' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have !!' + ';';
},
'It can have ()' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have ()' + ';';
},
'It can have @@' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have @@' + ';';
},
'It can have ^^' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have ^^' + ';';
},
'It can have ´´' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have ´´' + ';';
},
'It can have ``' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have ``' + ';';
},
'It can have ==' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have ==' + ';';
},
'It can have ++' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have ++' + ';';
},
'It can have --' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have --' + ';';
},
'It can have **' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have **' + ';';
},
'It can have //' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have //' + ';';
},
'It can have \\' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have \\' + ';';
},
'It can have "' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have "' + ';';
},
'It can have double and single quote in translation' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'It can have double and single quote in translation' + ';';
},
'Edit me' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'Edit me' + ';';
},
'Grunt-translate can have tailing comments' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'Grunt-translate can have tailing comments' + ';';
},
'Grunt-translate can have tailing comments with translation vars' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'Grunt-translate can have tailing comments with translation vars' + ';';
},
'Grunt-translate can have tailing comments with multi-line translation vars' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'Grunt-translate can have tailing comments with multi-line translation vars' + ';';
},
'wef' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'wef' + ';';
},
'efwedwefdefddqwdedwwedwecdsdewefdwfew' : function anonymous(it) {
return 'KEY_NOT_TRANSLATED: ' + 'efwedwefdefddqwdedwwedwecdsdewefdwfew' + ';';
}};function gt(key) { if(!(key in t)) { return 'KEY_NOT_IN_SOURCE: ' + key; } return t[key].apply(undefined, arguments);};if(typeof require === "function" && typeof exports === 'object' && typeof module === 'object') {module.exports = gt;}else if (typeof define === "function" && define.amd) {define(function () {return gt;});}else {window.gt = gt;}})();